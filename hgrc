[ui]
username = Sean Farley <sean.michael.farley@gmail.com>
ssh = ssh -C
editor = ~/.edit.sh
ignore = ~/.hgignore
debugger = ipdb

[phases]
publish = False

[extensions]
transplant =
color =
patchbomb =
parentrevspec =
schemes =
progress =
extdiff =
rebase =
convert =
hgk =
record =
pager =
churn =
histedit =
purge =
strip =
# Third-party extensions
debugshell = ~/.debugshell.py
hggit =
hgsubversion =
mercurial_keyring =
hgevolve =
hg_remotebranches =

[schemes]
bb = ssh://hg@bitbucket.org/
git+bb = git+ssh://git@bitbucket.org/
me = ssh://hg@bitbucket.org/seanfarley/
gh = git+ssh://git@github.com/
petsc = ssh://hg@bitbucket.org/petsc/
logilab = ssh://hg-lab@hg-lab.logilab.org/users/
smf = ssh://www-data@smf/

[hgsubversion]
nativerevs = True

[diff]
git = True
unified = 5

[pager]
pager = LESS="FRX" less

[mq]
secret = True

[extdiff]
cmd.sourcetreediff=opendiff
opts.sourcetreediff=
cmd.opendiff = fmdiff
cmd.wdiff = cwdiff
opts.wdiff = --diff --ab

[merge-tools]
emacsclient.executable = ~/.edit.sh
emacsclient.args = "-q --eval '(hg-mergetool-emacsclient-ediff \"$local\" \"$other\" \"$base\" \"$output\")'"
emacsclient.premerge = keep
emacsclient.priority = 1

keepthat.executable = sh
keepthat.args = -c 'cp "$local" "$output.original" && cp "$other" "$output"'
keepthat.premerge = True

keepthis.executable = sh
keepthis.args = -c 'cp "$other" "$output.incoming" && cp "$local" "$output"'
keepthis.premerge = True

sourcetreemerge.gui=False
sourcetreebulkmerge.gui=False
sourcetreemerge.binary=False
sourcetreebulkmerge.executable=/Applications/SourceTree.app/Contents/Resources/hg-merge.sh
sourcetreemerge.args=$local $other -ancestor $base -merge $output
sourcetreemerge.checkconflicts=True
sourcetreemerge.premerge=True
sourcetreemerge.executable=/Applications/SourceTree.app/Contents/Resources/opendiff-w.sh
sourcetreebulkmerge.premerge=False
sourcetreebulkmerge.binary=True

[hostfingerprints]
bitbucket.org = 24:9c:45:8b:9c:aa:ba:55:4e:01:6d:58:ff:e4:28:7d:2a:14:ae:3b
secure.rhodecode.org = 79:ce:40:68:a1:b1:cc:df:99:5d:04:52:35:61:28:7a:e7:f8:35:01
svn.macports.org = 4d:ea:4a:77:55:ac:8e:2e:9e:11:8a:59:3d:ec:c7:45:7d:b0:72:19

[email]
method = smtp
from = Sean Farley <sean.michael.farley@gmail.com>

[smtp]
host = smtp.gmail.com
port = 587
username = sean.michael.farley@gmail.com
tls = True

[color]
status.modified = cyan
status.added = green
status.removed = red
status.deleted = yellow bold underline
status.unknown = magenta bold underline
status.ignored = yellow underline
status.copied = green underline
diff.diffline = none
diff.extended = cyan
diff.file_a = red
diff.file_b = green
diff.hunk = yellow bold
diff.deleted = red
diff.inserted = green
diff.changed = white
diff.trailingwhitespace = white_background
qseries.applied = blue bold underline
qseries.unapplied = cyan bold
qseries.missing = red bold
bookmarks.current = magenta bold
tags.normal = magenta
log.tag = magenta
log.bookmark = magenta bold
log.branch = magenta bold
log.date = green bold
log.user = yellow
log.manifest = green bold underline
log.extra = yellow bold underline
changeset.public = blue
changeset.draft = green
changeset.secret = red bold

[alias]
### useful alias to check future amend result
# equivalent to the qdiff command for mq

# diff
pdiff=diff --rev .^

# status
pstatus=status --rev .^

# diff with the previous amend
odiff=diff --rev 'limit(precursors(.),1)' --rev .

# Show the url
url = showconfig paths.default

he = histedit
l = log --pager=always
p = pull -u
pr = pull --rebase

# Nudge: just push the current branch.
nudge = push -r .

# Some useful little aliases.
? = summary
df = diff
r = record

# Merge with default.
md = merge default

# Commit message shortcuts.

# this blows up when message has a '!' in it?
cm = commit -m
cus = commit -m 'subrepo: update state'
cmm = commit -m 'merge'

# Merge shortcuts.
mergelocal = !$HG --config ui.merge=internal:local merge $@
mergeother = !$HG --config ui.merge=internal:other merge $@
mergefail = !$HG --config ui.merge=internal:fail merge $@

# Shortcuts to resolve merge conflicts by taking one side or the other.
takelocal = !"$HG" revert --rev 'p1()' $@ && "$HG" resolve -m $@
takeother = !"$HG" revert --rev 'p2()' $@ && "$HG" resolve -m $@

# Run a colored diff and pipe it to less.
d = diff -p --pager=always
gd = d

# Log shortcuts --------------------------------------------------------------------

# Simple log commands that don't look bad

ll = log --pager=always                    --template="{label('changeset.{phase}', '{rev}')}:{label('changeset.{phase}', '{node|short}')} {label('log.description', \"{fill(desc|firstline|strip, '80')|firstline|strip}\")} {ifeq(branch,'default','',label('log.branch', '{branch} '))}{bookmarks % \"{label('log.bookmark', '{bookmark} ')}\"}{tags % \"{ifeq(tag,'tip','',label('log.tag', '{tag} '))}\"}{label('log.date', date|shortdate)} by {label('log.user', author|person)}\n"

# can't wrap the second {desc} with a label because there are too many encodes
gll = log -G --pager=always                 --template="{label('changeset.{phase}', '{rev}')}:{label('changeset.{phase}', '{node|short}')} {fill(desc|firstline|strip, '80')|firstline|strip} {ifeq(branch,'default','',label('log.branch', '{branch} '))}{bookmarks % \"{label('log.bookmark', '{bookmark} ')}\"}{tags % \"{ifeq(tag,'tip','',label('log.tag', '{tag} '))}\"}{label('log.date', date|shortdate)} by {label('log.user', author|person)}\n{sub(r'^.*\n?\n?', '', '{fill(desc|firstline|strip, \"95\", \"\", sub(r\"[0-9]\", \" \", \"{rev}              \"))}\n\n')}"

gl = gll -l 15 -r ::.

nll = log -G --pager=always --color=always --template="{if(svnrev, label('log.changeset', '[r{svnrev}] '))}{label('changeset.{phase}', rev)}:{label('changeset.{phase}', node|short)} {label('log.description', \"{fill(desc|firstline|strip, '80')|firstline|strip}\")} {ifeq(branch,'default','',label('log.branch', '{branch} '))}{bookmarks % \"{label('log.bookmark', '{bookmark} ')}\"}{tags % \"{ifeq(tag,'tip','',label('log.tag', '{tag} '))}\"}{label('log.date', date|shortdate)} by {label('log.user', author|person)}\n{if(sub(r'^.*\n?\n?', '', '{fill(desc|strip, \"95\")}\n'), sub(r'^.*\n?\n?', '\n', '{fill(desc|strip, \"95\")}\n'), sub(r'^.*\n?\n?', '', '{fill(desc|strip, \"95\")}\n'))}\n{file_mods % \"{label('status.modified', 'M {file}')}\n\"}{file_adds % \"{label('status.added', 'A {file}')}\n\"}{file_dels % \"{label('status.removed', 'R {file}')}\n\"}\n"

nl = nll -l 15 -r ::.

# hg show .  -- show a summary of rev . with diff.
show = nll --stat --hidden -vpr

# Make a new repo with some sensible defaults.
mkrepo = !$HG init $1 && cd $1 && \
          echo 'syntax: glob'  > .hgignore && \
          echo ''             >> .hgignore && \
          echo '.DS_Store'    >> .hgignore && \
          echo '*.pyc'        >> .hgignore && \
          echo '*.swp'        >> .hgignore && \
          echo '*.swo'        >> .hgignore && \
          echo '*.un~'        >> .hgignore && \
          echo '.ropeproject' >> .hgignore && \
          echo 'tags'         >> .hgignore && \
          echo "[paths]\n" >> .hg/hgrc

# Edit the current repo's hgrc file.
rc = !$EDITOR `$HG root`/.hg/hgrc

# Easily add ignore patterns to .hgignore and commit.
ignore = ![ -n "$@" ] && echo '$@' >> `$HG root`/.hgignore && \
          $HG commit `$HG root`/.hgignore -Am 'Add "$@" to .hgignore.'

# Run hg commands on all subrepos at once.
subs  = !"$HG" debugsub | grep '^path' | cut -d' ' -f2 | xargs    -n1  -I SUB $HG -R "`$HG root`/SUB" $@
psubs = !"$HG" debugsub | grep '^path' | cut -d' ' -f2 | parallel -j10 -I SUB $HG -R "`$HG root`/SUB" $@

# Run shell commands on all subrepos at once.
subscmd  = !"$HG" debugsub | grep '^path' | cut -d' ' -f2 | xargs    -n1  -I SUB sh -c "cd `$HG root`/SUB && $@"
psubscmd = !"$HG" debugsub | grep '^path' | cut -d' ' -f2 | parallel -j10 -I SUB sh -c "cd `$HG root`/SUB && $@"

# Run a command on a subrepo:
#
#     hg sub SUBREPO_REGEX ...command and arguments...
#
# The SUBREPO_REGEX should be a regex that will let grep match one and only one of
# the subrepos in .hgsub.  For example:
#
#     $ cat .hgsub
#     bundled/foo = ...
#     bundled/bar = ...
#
#     $ hg sub fo root
#     .../bundled/foo
#     $ hg sub ar status -m
#     M lol.py
sub = !grep = "`$HG root`/.hgsub" | cut -d' ' -f1 | grep "$1" | tr -d '\n ' | xargs -0 -I SUB $HG -R SUB "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12" "$13" "$14" "$15" "$16" "$17" "$18" "$19" "$20"

# pss for non-ignored files
pss = !$HG locate "set:not ignored()" | xargs pss $@
grep-wdir = !$HG locate "set:not ignored()" | xargs grep $@
egrep = !$HG locate "set:not ignored()" | xargs egrep $@
