# Create a new directory and enter it
unalias md 2>/dev/null
md() {
  mkdir -p "$@" && cd "$@"
}

# Easier navigation: .., ..., etc.
unalias .. 2>/dev/null
..() {
  eval cd ../\""$@"\"
}

_..() {
  [[ ${COMP_WORDS[COMP_CWORD]} == ..* ]] || COMP_WORDS[COMP_CWORD]="../${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=( $(compgen -S '/' -d ${COMP_WORDS[COMP_CWORD]} -- ${COMP_WORDS[COMP_CWORD]} | cut -b4- ) )
}
complete -o nospace -F _.. ..

unalias ... 2>/dev/null
...() {
  eval cd ../../\""$@"\"
}

_...() {
  [[ ${COMP_WORDS[COMP_CWORD]} == ../..* ]] || COMP_WORDS[COMP_CWORD]="../../${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=( $(compgen -S '/' -d ${COMP_WORDS[COMP_CWORD]} -- ${COMP_WORDS[COMP_CWORD]} | cut -b7- ) )
}
complete -o nospace -F _... ...

unalias .... 2>/dev/null
....() {
  eval cd ../../../\""$@"\"
}

_....() {
  [[ ${COMP_WORDS[COMP_CWORD]} == ../../..* ]] || COMP_WORDS[COMP_CWORD]="../../../${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=( $(compgen -S '/' -d ${COMP_WORDS[COMP_CWORD]} -- ${COMP_WORDS[COMP_CWORD]} | cut -b9- ) )
}
complete -o nospace -F _.... ....

function my_cd {
    \cd "$@" >/dev/null
}
alias cd='my_cd'
complete -o nospace -F _cd my_cd

##################
# helper functions
##################

# usage: _not_in_list_exit $element $list
# return: echo "1" if found, "" if not found
_in_list() {
  local i
  local found=0

  for i in ${2//,/ }; do [[ "$i" == "$1" ]] && found=1; done

  [ $found -eq 1 ] && echo 1
}

# All the dig info
digga() {
  dig +nocmd "$1" any +multiline +noall +answer

}

pg() {
  [ -z "$@" ] && ps aux && return
  ps aux | grep -v grep | grep "$@"
}

kg() {
  [ -z "$@" ] && return
  local p line SUDO
  while read -r line; do
    SUDO=""
    p=($line)
    if [[ -n "${p[1]}" && ${p[1]} > 0 ]]; then
      [[ "$USER" != "${p[0]}" && "$(which sudo 2>/dev/null)" != "" ]] && SUDO=sudo
      $SUDO kill -9 ${p[1]}
      [ -z "$(ps ${p[1]} | grep -v PID)" ] && echo "Killed ${p[8]}|${p[1]}|${p[0]}|${p[10]}"
    fi
  done <<< "$(pg $@)"
}

d() {
  local i
  local GET="curl -OL"
  [[ -z "$(which curl 2>/dev/null)" ]] && GET="wget -c"

  for i in $@; do
    $GET $i;
  done;
}

essh() {
  # system ssh command
  local SSH=$(which ssh)

  # read from emacs server file what port it is currently listening on
  local PORT=$(egrep  -o '127.0.0.1:([0-9]*)' ~/.emacs.d/server/server | sed 's/127.0.0.1://')

  # -t : allocate a tty so we are there.
  # -R : the remote port forward that lets emacsclient talk back
  # $@ : any other args this script was invoked with should be passed along.

  [ -z "$DEBUG" ] || printf "[DEBUG] SCP: copying $FILE"
  scp ~/.emacs.d/server/server $@:~/.emacs.d/server/server &>/dev/null

  $SSH -t -R $PORT:127.0.0.1:$PORT $@
}

# usage: _mp_equiv $portname
# notes: due to macports not having a 'port conflicts' command, we'll just hardcode it here
_mp_equiv() {
  local compilers=$(echo clang{3{0..2},} gcc4{4..8} dragonegg3{0..2} system_gcc)
  local mpi=$(echo {mpich,openmpi}{-devel,} mpich2)
  local petsc=$(echo petsc{-dev,})
  case $1 in
    clang|gcc|dragon*) echo "${compilers// /,}";;
    *mpi*) echo "${mpi// /,}";;
    petsc*) echo "${petsc// /,}";;
    *) echo "$1";;
  esac
}

_mpdeactivate() {
  local cur words cword
  local i count

  _init_completion || return

  count=0
  for i in ${words[@]}; do
    [ $count -eq $cword ] && break
    count=$((++count))
  done

  [ $count -le 1 ] && COMPREPLY=( $( command port -q search --name --glob -- "$cur*" 2>/dev/null | uniq ) )
}

# usage: mpdeactivate $port $compiler
# notes: if $compiler is non-empty, then search upwards for sibling ports that are
# connected to $port. Also, we cannot calculate dependents of a deactivated port because
# of the design of macports storing the dependents without the graph data
mpdeactivate() {
  local i port version variant
  local deps=$(~/.port-rdependents.py $1 $2)

  [[ -z "$deps" || "$deps" == "$1"* ]] && return 0

  rm -f ~/.ports.{cmd,undo}.deactivate.$1

  local OLD_IFS=$IFS
  IFS=$'\n';

  for i in $deps; do
    port=$(echo $i | cut -d' ' -f1)

    echo "port -q deactivate $port" >> ~/.ports.cmd.deactivate.$1
  done

  for i in $(printf "$deps\n" | tac); do
    port=$(echo $i | cut -d' ' -f1)
    version=$(echo $i | cut -d' ' -f2)
    variant=$(echo $i | cut -d' ' -f3)

    echo "port -q install $port $version $variant" >> ~/.ports.undo.deactivate.$1
  done

  IFS=$OLD_IFS

  sudo bash -c "while read line; do eval \"$line\"; done < ~/.ports.cmd.deactivate.$1"
}
complete -F _mpdeactivate mpdeactivate

_mpactivate() {
  local cur prev words cword
  local i count port

  _init_completion || return

  count=0
  for i in ${words[@]}; do
    [ $count -eq $cword ] && break
    if [[ -z "$port" && $i != -* ]]; then
      if command port -q search --name --exact -- "$i" | grep -qi '^'$i'$'; then
        port=$i
      fi
    fi
    count=$((++count))
  done

  if [ -z "$port" ]; then
    COMPREPLY=( $( command port -q search --name --glob -- "$cur*" 2>/dev/null | uniq ) )
  else
    COMPREPLY=( $( command port -q info --line --variants -- "$port" | tr '\n,' '  ' ) )
    COMPREPLY=( $( compgen -P'+' -W '${COMPREPLY[@]}' -- ${cur/+/} ) )
  fi
}

mpactivate() {
  local i port variant compilers c oldc

  local newport=$1
  shift
  local variants="$@"

  # nothing to do, return error
  [ -z "$newport" ] && return 1

  # look up (in a hard coded dictionary) the equivalent ports for a given name
  local porteq=$(_mp_equiv $newport)
  local mpis=$(_mp_equiv mpi)

  # special concept for mpi because it is a compiler wrapper and some of the compilers are
  # not ports
  [[ "$mpis" == "$porteq" ]] && compilers=$(_mp_equiv gcc)

  # no two equivalent ports can be active at the same time, so grep for 'active'
  local portquery=$(port installed ${porteq//,/ } | grep active)
  local oldport=$(echo $portquery | perl -lne "print $& if /(${porteq//,/|})/")

  # if $compilers is not empty, then we're switching mpi
  if [ -n "$compilers" ]; then
    oldc=$(echo $portquery | perl -lne "print $& if /(${compilers//,/|})/")
    c=$(echo $variants | perl -lne "print $& if /(${compilers//,/|})/")
    [ -z "$c" ] && c=$oldc
  fi

  # so far, there is only one special variant: 'debug'
  # +debug -> debug
  # -debug -> no debug, i.e. optimized
  local debug=$(echo $variants | perl -lne "print $& if /\+(debug)/")
  local olddebug=$(echo $portquery | perl -lne "print $& if /\+(debug)/")

  mpdeactivate "$oldport" "$oldc"

  local deps=$(cat ~/.ports.undo.deactivate.$oldport | perl -pe 's,port.*install ,,')

  # if $oldport is empty, then perhaps the port was deactivated by hand; if so, read the
  # dependencies from the file leftover by mpdeactivate
  if [ -z "$oldport" ]; then
    oldport=$(printf "$deps" | head -n1 | perl -lne "print $& if /(${porteq//,/|})/")
    olddebug=$(printf "$deps" | head -n1 | perl -lne "print $& if /\+(debug)/")
    oldc=$(printf "$deps" | head -n1 | perl -lne "print $& if /(${compilers//,/|})/")
    [ -z "$c" ] && c=$oldc
  fi

  rm -f ~/.ports.cmd.install.$newport

  local OLD_IFS=$IFS
  IFS=$'\n';

  for i in $deps; do
    port=$(echo $i | cut -d' ' -f1)
    version=$(echo $i | cut -d' ' -f2)
    variant=$(echo $i | cut -d' ' -f3)

    # change the old port name to the new one (e.g. mpich2 -> openmpi) and drop the
    # version number so that and upgrade can occur
    [[ "$port" == "$oldport" ]] && port=$newport && version="" && variant="$variant$variants"

    # replace old port variant with new one (if it exists)
    variant=$(echo $variant | perl -pe "s,${oldport//-/_},${newport//-/_},g")

    ####################################################
    # some hacky logic; described in details in comments
    ####################################################

    # if $debug is empty, then remove the variant
    [ -z "$debug" ] && variant=$(echo "$variant" | perl -pe 's,\+debug,,')
    variant+="$debug"

    # replace old compiler with new one
    [ -n "$compilers" ] && variant=$(echo $variant | perl -pe "s,${compilers//,/|},$c,g")

    echo "port -q clean $port" >> ~/.ports.cmd.install.$newport
    echo "port -q install $port $version $variant" >> ~/.ports.cmd.install.$newport
  done

  IFS=$OLD_IFS

  sudo bash -c "while read line; do eval \"$line\"; done < ~/.ports.cmd.install.$newport"

  [ $? -eq 0 ] && rm -f ~/.ports.cmd.install.$newport ~/.ports.{cmd,undo}.deactivate.$oldport
}
complete -F _mpactivate mpactivate

mpi() {
  local mpis=$(_mp_equiv mpi)
  local port=$(port installed ${mpis//,/ }  | grep 'active' | perl -pe 's, \(active\),,')
  [ -z "$port" ] && port="No mpi is active"
  echo $port
}

pd() {
  local i
  local d="${@%/}"
  if [ ! -z "$d" ]; then
    if [ ! -d "$d" ]; then
      for i in ${CDPATH//:/$'\n'}; do [ -d "$i/$d" ] && d="$i/$d"; done
    fi
    [ -d "$d" ] && export PETSC_DIR="$(readlink -f $d)" || echo "error: $d is not a directory"
  fi
  echo "$PETSC_DIR"
}
complete -o nospace -F _cd pd

pa() {
  if [[ -n "$@" && -x /opt/local/bin/port ]]; then
    export PETSC_ARCH="arch-${@%/}"

    [[ $PETSC_ARCH != *-opt* ]] && debug="+debug"
    [[ $PETSC_ARCH == *-64* ]] && long="+longindex"

    local variants="$debug$long"
    local mpi="$(mpi)"
    [[ $PETSC_ARCH == *-test* ]] && mpdeactivate $mpi && sudo port -q activate $mpi

    mpdeactivate $(port installed petsc* | grep active | perl -pe 's, \(active\),,')
  fi
  echo "$PETSC_ARCH"
}
complete -W "c c-64 c-fast c-opt complex cuda intel intel-opt test" pa

rmlog() {
  rm -rf CMake* *.log *.log.* *TAGS *.cache *.status $@
}
complete -A file rmlog

prm() {
  rm -rf arch* externalpackages && rmlog $@
}
complete -A file petsc-clean

pc() {
  printf "Configuring for PETSC_ARCH: "

  local i port
  local extra=""
  local arch=""
  for opt in $@; do
    [[ $opt == --* ]] && extra="$extra $opt" || arch="$opt"
  done

  local common_variants="netcdf,ml,hypre,metis,parmetis,blacs,scalapack,mumps,superlu,superlu_dist,sundials,suitesparse,fftw,yaml"

  # need to have map from variants to port names
  local common_ports="${common_variants//yaml/libyaml}"
  common_ports="${common_ports//fftw/fftw-3}"

  local common=""
  local active_ports=$(port installed ${common_ports//,/ } | grep active | perl -pe 's,^[\s]*,,')

  local OLD_IFS=$IFS
  IFS=$'\n';

  # for each active port, build the configure options
  for i in $active_ports; do
    port=$(echo $i | cut -d' ' -f1)
    case $port in
      fftw-3) common+=",fftw";;
      SuiteSparse) common+=",cholmod,umfpack";;
      *) common+=",$port";;
    esac
  done

  common=$(echo $common | perl -pe 's/^,//')

  IFS=$OLD_IFS

  pa $arch
  arch="$PETSC_ARCH"

  local libs="--with-shared-libraries --with-c++-support"
  local debug="--without-debugging"
  [[ $PETSC_ARCH != *opt* ]] && debug="--COPTFLAGS=-O0 --CXXOPTFLAGS=-O0 --FOPTFLAGS=-O0"

  if [[ $PETSC_ARCH == *-64* ]]; then
    common="metis,parmetis,superlu_dist,numdiff"
    libs="$libs --with-64-bit-indices"
  fi

  [[ $PETSC_ARCH == *-cuda* ]] && common+=",cusp" && libs+=" --with-thrust --with-cuda"

  libs="--with-{$common}-dir=/opt/local $libs $debug"
  [[ $PETSC_ARCH == *-test* ]] && libs=""

  eval ./configure $extra $libs
}

emacs-compile-plugins() {
  local i j k includes

  for i in plugins; do
    includes=$(for k in $(ls ~/.emacs.d/$i); do printf "'-'L ~/.emacs.d/plugins/$k "; done | perl -pe "s,'-',-,g")
  done

  for i in plugins themes; do
    for j in $(ls ~/.emacs.d/$i | grep -v cedet); do
      cd ~/.emacs.d/$i/$j
      for k in *.el; do emacs -L . $includes -L ../nxhtml/util --batch --eval "(byte-compile-file \"$k\")"; done
      cd -
    done
  done
}

emacs-pull-plugins() {
  local i j

  for j in plugins themes; do
    for i in $(ls ~/.emacs.d/$j); do
      if [ -d ~/.emacs.d/$j/$i/.git ]; then
        cd ~/.emacs.d/$j/$i
        printf "Pulling $i: "
        git pull
        cd -
      fi
    done
  done
}

mpsearch() {
  csearch -f Portfile "$@" | less
}

ve() {
  [ ! -d "$WORKON_HOME" ] && mkdir -p "$WORKON_HOME"
  [ -z "$@" ] && return
  if [ ! -d "$WORKON_HOME/$@" ]; then
    mkvirtualenv "$@"
    mkdir -p $VIRTUAL_ENV/repos/bucket01 $VIRTUAL_ENV/repos/bucket02 $VIRTUAL_ENV/repos/bucket03
    cat >$VIRTUAL_ENV/bin/postactivate <<EOF
#!/opt/local/bin/bash
# This hook is sourced after this virtualenv is activated.

export ARCHFLAGS="-arch x86_64"
export CPPFLAGS="-I/opt/local/include"
export LDFLAGS="-L/opt/local/lib"
export DJANGO_SETTINGS_MODULE="bitbucket.settings.dev"
export PATH=\$PATH:\$PWD/node_modules/.bin
EOF
    pip install --upgrade pip
    deactivate "$@"
  fi
  workon "$@"
}

bb() {
  local bdir=$PROJECTS/bitbucket
  cd $bdir
  mkdir -p /opt/python/domains/bitbucket.org/current
  rm -f /opt/python/domains/bitbucket.org/current/bitbucket
  ln -si $bdir /opt/python/domains/bitbucket.org/current
  ve bb
  rm -rf local/env
  ln -si $VIRTUAL_ENV local/env
}

imsg() {
  if [ $# -lt 1 ]; then
    echo "Enter a iMessage account (email or phone number i.e +14156...) "
  fi

  local dbpath=$2
  [ -z "$dbpath" ] && dbpath="$HOME"

  sqlite3 $dbpath/Library/Messages/chat.db "select is_from_me,text,datetime(date + strftime('%s', '2001-01-01 00:00:00'),'unixepoch', 'localtime') as date from message" > MessageBackup.txt

  sqlite3 $dbpath/Library/Messages/chat.db "select filename from attachment" | cut -c 2- | awk -v home=$dbpath '{print home $0}' | tr '\n' '\0' | xargs -0 -t -I fname cp fname .
}

function vpn-connect {
  echo -n "Connecting ${user} to vpn using DUO ${duo}..."
  # hardcode the password here so that no variables hold the plain text
  printf "sfarley\n$(/usr/bin/security find-internet-password -w -a sfarley -s vpn.atlassian.com)\npush\n" | sudo openconnect vpn-us-east-1.atlassian.com
  echo "Done"
}

watchman-sync() {
  local wm=$(which watchman)
  [ -z "$wm" ] && echo "watchman executable not found!" && return 2

  local server="euclid"
  local project="$(basename $PWD)"
  local root="$(basename $(dirname $PWD))"

  # make sure we are in projects/foo
  [[ "$root" != "projects" ]] && echo "current working directory not recognized" && return 3

  # set remote server
  [ -n "$1" ] && server="$1"

  watchman -j<<-EOF
  [
  "trigger",
  "$PWD",
  {
    "name": "resync",
    "append_files": "false",
    "command": [
      "rsync",
      "-avhpI",
      "--checksum",
      "--exclude", "build",
      "--exclude", "hg.build",
      "--exclude", "*.so",
      "--exclude", "*.dll",
      "--exclude", "*.dSYM",
      "$PWD/",
      "euclid:$root/$project"
    ]
  }
  ]
EOF
}
