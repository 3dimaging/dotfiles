# @gf3’s Sexy Bash Prompt, inspired by "Extravagant Zsh Prompt"
# Shamelessly copied from https://github.com/gf3/dotfiles

# Powerline fonts from: https://github.com/Lokaltog/powerline-fonts
# On Mavericks, the powerline font was about 1px off, so followed:
# https://gist.github.com/qrush/1595572
# on the powerline-fontpatcher repo and settled on just using the y offset

# Helper functions are borrowed from liquidprompt:
# https://github.com/nojhan/liquidprompt

# exit if we terminal can't do colors
if [ ! -t 0 ] || [ "$TERM" == "dumb" ]; then
  return
fi

##
# colored highlighting is awesome
##

if [ "$TERM" != "dumb" -a -x "$(which dircolors 2>/dev/null)" ]; then
  eval "$(dircolors -b ~/.dir_colors)"
fi

RESET=$(tput sgr0)
BOLD=$(tput bold)

BLACK=0
WHITE=240
MAGENTA=9
GREEN=190
PURPLE=5
ORANGE=172
YELLOW=214
PINK=216

PATHBG=237                      # dark grey
PATHFG=250                      # light grey
SEP_FG=244                      # nearly-white grey

CLEAN_BG=148                    # a light green color
CLEAN_FG=0                      # black
DIRTY_BG=161                    # pink/red
DIRTY_FG=15                     # white

PASSBG=236                      # dary grey
PASSFG=15                       # white-ish
FAILBG=161                      # pink/red
FAILFG=15                       # white-ish

HG="hg"
[ -n "$(which chg 2>/dev/null)" ] && HG="chg"

MD5="md5"
[ -n "$(which md5sum 2>/dev/null)" ] && MD5="md5sum"

COLORS=(
  $PURPLE
  $PINK
  $WHITE
  $YELLOW
  $MAGENTA
  $YELLOW
  $MAGENTA
  $WHITE
  $PINK
  $PURPLE
)

function pretty_dir () {
  # decent default values
  local max_len=27
  local mask=" … "
  local keep=2
  local ret=""
  local p=${PWD/#$HOME/"~"}

  if (( ${#p} <= ${max_len} )); then
    ret="$p"
  else
    local tmp=${path//\//}
    local -i delims=$(( ${#p} - ${#tmp} ))

    for (( dir=0; dir < ${keep}; dir++ )); do
      (( ${dir} == ${delims} )) && break

      local left="${p#*/}"
      local name="${p:0:${#p} - ${#left}}"
      p="${left}"
      ret="${ret}${name%/}/"
    done

    if (( ${delims} <= ${keep} )); then
      # no dirs between LP_PATH_KEEP leading dirs and current dir
      ret="${ret}${p##*/}"
    else
      local base="${p##*/}"

      p="${p:0:${#p} - ${#base}}"

      [[ ${ret} != "/" ]] && ret="${ret%/}" # strip trailing slash

      local -i len_left=$(( ${max_len} - ${#ret} - ${#base} - ${#mask} ))

      ret="${ret}${mask}${p:${#p} - ${len_left}}${base}"
    fi
  fi

  printf "${ret//\\/\\\\}"
}

# Search upwards through a directory structure looking for a file/folder with
# the given name.  Used to avoid invoking 'hg' and 'bzr'.
_lp_upwards_find()
{
    local dir
    dir="$PWD"
    while [[ -n "$dir" ]]; do
        [[ -d "$dir/$1" ]] && return 0
        dir="${dir%/*}"
    done
    return 1
}

function _lp_git_branch() {
  local gitdir
  gitdir="$([ $(\git ls-files . 2>/dev/null | wc -l) -gt 0 ] && \git rev-parse --git-dir 2>/dev/null)"
  [[ $? -ne 0 || ! $gitdir =~ (.*\/)?\.git.* ]] && return
  local branch
  # Recent versions of Git support the --short option for symbolic-ref, but
  # not 1.7.9 (Ubuntu 12.04)
  if branch="$(\git symbolic-ref -q HEAD)"; then
    printf "${branch#refs/heads/}"
  else
    # In detached head state, use commit instead
    # No escape needed
    \git rev-parse --short -q HEAD
  fi
}

# return 0 or 1 for dirty working directory
function _git_info() {
  _lp_upwards_find .git || return -1

  local br="$(_lp_git_branch)"
  local remote
  local st

  [ -n "$(\git stash list 2>/dev/null)" ] && br="$br+"

  st="$(git status 2> /dev/null)"
  remote="$(echo "$st" | perl -lne 'print " $2$1" if /Your branch is (ahead|behind).*?(\d+) comm/' | perl -pe 's,behind,⇣,' | perl -pe 's,ahead,⇡,')"
  st="$(echo "$st" | tail -1 | grep -v 'nothing to commit')"

  printf "$br$remote"

  [ -n "$st" ] && return 1
  return 0
}

# return 0 or 1 for dirty working directory
function _hg_info() {
  _lp_upwards_find .hg || return -1

  local br="$(fast-hg-bookmark 2>/dev/null)"
  local st="$($HG status 2>/dev/null)"
  local remote

  [ "$(echo "$st" | grep -c '\(^\?\)')" != "0" ] && br="$br*"
  [ -n "$($HG shelve -l 2>/dev/null)" ] && br="$br+"

  remote="$(fast-hg-remote | grep -v '+ 0' | egrep '^(\+|-)' | perl -pe 's,-\s?(\d+), \1⇣,' | perl -pe 's,\+\s?(\d+), \1⇡,')"

  printf "$br$remote"

  [ -n "$st" ] && return 1
  return 0
}

# note: unless the last portion of PS1 is a newline, then calling functions will have a
# problem as described here:
# http://stackoverflow.com/questions/6592077/bash-prompt-and-echoing-colors-inside-a-function
function update_ps1 () {
  # this function will build the PS1 string in-place as opposed to embedding bash
  # functions in the string due craziness with escape sequences as mentioned in the
  # stackoverflow link above
  local err=$?

  # keeping track of the current powerline color
  local oldbg=0
  local bg
  local fg

  # repo variables
  local repo
  local dirty
  local vcs_type

  # only generate a hash color for non-local machines
  bg=$ORANGE
  fg=$BLACK
  if [[ "$(hostname)" != laptop.* ]]; then
    # generate a hash from the hostname
    local host_hash="$(hostname | $MD5)"

    # convert into a positive integer
    local host_number=$(( 0x${host_hash:4:6} % ${#COLORS[@]} ))
    [[ $host_number -lt 0 ]] && host_number=$(( -$host_number ))

    bg=${COLORS[$host_number]}
  fi

  # note: these strings are chained from background color to foreground color so make
  # sure to check when rearranging
  local host="\[$(tput setaf $oldbg)$(tput setab $bg)\] \[$BOLD\]$(hostname -s) \[$RESET\]"

  # hook into hostname color
  oldbg=$bg
  bg=$PATHBG
  fg=$PATHFG

  # creates a string with a shortened path
  local dir="$(pretty_dir)"
  # replace all the '/' with a fancy unicode separator
  dir="${dir//\//\\[$(tput setaf $SEP_FG)\\]  \\[$(tput setaf $fg)\\]}"
  dir="\[$(tput setaf $oldbg)$(tput setab $bg)\]\[$(tput setaf $fg)\] $dir "

  repo="$(_git_info)"
  dirty=$?
  vcs_type="git"
  if [ -z "$repo" ]; then
    repo="$(_hg_info)"
    dirty="$?"
    vcs_type="hg"
    if [ -z "$repo" ]; then
      dirty=0
      vcs_type=""
    fi # nothing
  fi # hg

  # if repo found, plug it into the powerline chain
  if [ -n "$vcs_type" ]; then
    # color repo depending on dirty working directory; must check here because we
    # need to set vcs type, status, etc. and it's annoying to deal with global
    # variables and subprocesses
    oldbg=$bg
    bg=$CLEAN_BG
    fg=$CLEAN_FG

    [ $dirty -eq 1 ] && bg=$DIRTY_BG && fg=$DIRTY_FG
    repo="\[$(tput setaf $oldbg)$(tput setab $bg)\]\[$(tput setaf $fg)\] $repo "
  fi

  oldbg=$bg
  bg=$PASSBG
  fg=$PASSFG
  [ $err -ne 0 ] && bg=$FAILBG && fg=$FAILFG

  repo="$repo\[$(tput setab $bg)$(tput setaf $oldbg)\]"

  # change the prompt mark depending on the repo type
  local mark="\$"
  case "$vcs_type" in
    git) mark="±";;
    hg) mark="☿";;
  esac

  # display previous bg color as fg color for arrow and new fg color for '$'
  local prompt="\[$(tput setab $bg)$(tput setaf $fg)\] $mark "
  # the end cap which clears the background color and puts an arrow in the fg color of
  # the previous bg color
  local end="\[$RESET\]\[$(tput setaf $bg)\]"

  export PS1="$host$dir$repo$prompt$end\[$RESET\]"
}

export PROMPT_COMMAND="update_ps1"
