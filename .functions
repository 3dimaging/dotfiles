# Create a new directory and enter it
unalias md 2>/dev/null
md() {
  mkdir -p "$@" && cd "$@"
}

# Easier navigation: .., ..., etc.
unalias .. 2>/dev/null
..() {
  eval cd ../\""$@"\"
}

_..() {
  local IFS=$'\n'
  COMPREPLY=( $(compgen -A directory -W "$(ls -p .. | grep / | sed 's,/,,')" -- ${COMP_WORDS[COMP_CWORD]}) )
}
complete -F _.. -o nospace ..

unalias ... 2>/dev/null
...() {
  eval cd ../../\""$@"\"
}

_...() {
  local IFS=$'\n'
  COMPREPLY=( $(compgen -A directory -W "$(ls -p ../.. | grep / | sed 's,/,,')" -- ${COMP_WORDS[COMP_CWORD]}) )
}
complete -F _... -o nospace ...

unalias .... 2>/dev/null
....() {
  eval cd ../../../\""$@"\"
}

_....() {
  local IFS=$'\n'
  COMPREPLY=( $(compgen -W "$(ls -p ../../.. | grep / | sed 's,/,,')" -- ${COMP_WORDS[COMP_CWORD]}) )
}
complete -F _.... -o nospace ....

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# All the dig info
digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

a() {
  ack "$@" .
}

mpcategory() {
  port info $@ 2>/dev/null | head -n 1 | sed -n 's#.*(\(.\{1,\}\)).*#\1#p' | awk -F',' '{print $1}'
}

mpc() {
  CATEGORY=$(mpcategory $@)
  if [ ! -z $CATEGORY ]; then
    echo "$MP/$CATEGORY"
  fi
}

mp() {
  CATEGORY=$(mpcategory $@)
  if [ ! -z $CATEGORY ]; then
    echo "$MP/$CATEGORY/$@"
  fi
}

psgrep() {
  ps aux | grep -v grep | grep "$@"
}

killgrep() {
  PROCS=$(psgrep $@ | awk '{print $2;}')
  for p in $PROCS; do
    kill $p
  done
}

hgwatch() {
  if [[ -s $(which watchmedo 2>/dev/null) || -s $(which watchmedo-2.7 2>/dev/null) ]]; then
    OPTS="--recursive"
    if [[ "$HOME" == "$@" ]]; then
      OPTS="$(ls -d $HOME/*/ $HOME/.*/ | grep -v '\.\./' | grep -v '/\./' | grep -v Trash)"
    fi

    watchmedo shell-command $@ $OPTS --ignore-directories --command='$(hg dirty --cwd '$@' 2>/dev/null)' --ignore-pattern '*/.hg/*;*.o;*/*.mod;*.a;*.dylib;*.d;*a.out;*/tmp*;*/external*;*/arch*;*/CMakeFiles*;*/.cmake*;*/RDict*;*/config*.log;*/conftestval*;*/ftn-auto*'
  fi;
}

d() {
  for i in $@; do
    curl -O $i;
  done;
}
