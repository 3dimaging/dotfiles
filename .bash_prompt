# @gf3’s Sexy Bash Prompt, inspired by "Extravagant Zsh Prompt"
# Shamelessly copied from https://github.com/gf3/dotfiles

if [ -t 0 ]; then

  ##
  # colored highlighting is awesome
  ##

  if [ "$TERM" != "dumb" -a -x "$(which dircolors 2>/dev/null)" ]; then
    eval "$(dircolors -b ~/.dir_colors)"
  fi

  MAGENTA=$(tput setaf 9)
  ORANGE=$(tput setaf 172)
  ORANGEBG=$(tput setab 172)
  GREEN=$(tput setaf 190)
  PURPLE=$(tput setaf 5)
  WHITE=$(tput setaf 240)
  BOLD=$(tput bold)
  RESET=$(tput sgr0)

  PATHBG=$(tput setab 237)
  PATHFG=$(tput setaf 250)
  CWD_FG=$(tput setaf 254)
  SEP_FG=$(tput setaf 244)

  PASSBG=$(tput setab 236)
  PASSFG=$(tput setaf 15)
  FAILBG=$(tput setab 161)
  FAILFG=$(tput setaf 15)

  function parse_git_dirty () {
    [[ $(git status 2> /dev/null | tail -1) != "nothing to commit (working directory clean)" ]] && echo "*"
  }

  function parse_git_hg_branch () {
    local st=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/")
    [ -z "$st" ] && st=$(fast-hg-bookmark 2> /dev/null)$(fast-hg-status 2> /dev/null)
    [ -n "$st" ] && printf "$WHITE on $PURPLE$st"
  }

  function pretty_dir () {
    local path=${1//$HOME/'~'}
    local dir=$(dirname $path | perl -pe 's,^[^~],,')
    local dir=${dir//\//$SEP_FG ⮁ $PATHFG}
    printf "$PATHBG$PATHFG $(echo $dir)"
    [ -n "$dir" ] && printf "$SEP_FG ⮁ "
    printf "$CWD_FG$(basename $path) "
  }

  function root_prompt () {
    local bg="$PASSBG"
    local fg="$PASSFG"
    if [ ${1:-0} -ne 0 ]; then
      bg="$FAILBG"
      fg="$FAILFG"
    fi
    # note: when there's a background color transition, you have to get the next
    # segment's bg color, this is where doing it in python would be nice

    # example: since this root_prompt's bg color is changing, we print the previous '>'
    # (arrow) in this function instead of, say, pretty_dir()
    printf "$RESET$bg${PATHBG//48;/38;}"

    printf "$bg$fg \$ $RESET${bg//48;/30;}"
  }

  # note: unless the last portion of PS1 is a newline, then calling functions will have a
  # problem as described here:
  # http://stackoverflow.com/questions/6592077/bash-prompt-and-echoing-colors-inside-a-function
  function update_ps1 () {
    # this function will build the PS1 string in-place as opposed to embedding bash
    # functions in the string due craziness with escape sequences as mentioned in the
    # stackoverflow link above
    local prompt=$(root_prompt $?)
    local dir="$(pretty_dir $PWD)"
    local st="$(parse_git_hg_branch)"

    # note: these strings are chained from background color to foreground color so make
    # sure to check when rearranging
    local user="\[$PATHBG$MAGENTA\] $USER\[${PATHBG//48;/38;}\] \[$ORANGEBG\]⮀"
    local host="\[$PATHFG\] $(hostname -s)\[$ORANGE$PATHBG\]⮀"

    export PS1="$user$host$dir\[$RESET\]$st\[$WHITE\]\n$prompt\[$RESET\]"
  }

  export PROMPT_COMMAND="update_ps1"

fi
